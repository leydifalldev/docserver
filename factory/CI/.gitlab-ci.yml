variables:
  ARGOCD_VERSION: "2.5.5"

stages:
  - build
  - update_manifests
  - synchronize_argo

build:
  image: docker:stable
  stage: build
  services:
    - docker:dind
  before_script:
    - docker info
    - docker login -u $REGISTRY_USERNAME -p $REGISTRY_PASSWORD $REGISTRY_URL
  script:
    - docker build -t $CI_REGISTRY_IMAGE/$CI_PROJECT_NAME:$CI_COMMIT_REF_NAME .
    - docker build -t $CI_REGISTRY_IMAGE/$CI_PROJECT_NAME:latest .
    - docker push $CI_REGISTRY_IMAGE/$CI_PROJECT_NAME:$CI_COMMIT_REF_NAME
    - docker push $CI_REGISTRY_IMAGE/$CI_PROJECT_NAME:latest
  rules:
    - if: $CI_COMMIT_TAG != null

update_manifests:
  image: alpine:latest
  stage: update_manifests
  variables:
    GIT_STRATEGY: none
  retry: 2
  before_script:
    - apk add --no-cache git curl bash openssh
    - curl -s "https://raw.githubusercontent.com/kubernetes-sigs/kustomize/master/hack/install_kustomize.sh"  | bash
    - mv kustomize /usr/local/bin/
    - cd
    - git clone --branch $CI_COMMIT_REF_NAME http://supervisor:$SUPERVISOR_ACCESS_TOKEN@git.protobox/gitlab/protobox1/docserver.git
    - cd $CI_PROJECT_NAME
    - git config --global user.name $REGISTRY_USERNAME
    - git config --global user.email $CI_USER_EMAIL
    - echo $CI_PIPELINE_CREATED_AT
  script:
    - echo $CI_PROJECT_NAME
    - git fetch --prune
    - git checkout ${ARGO_TARGET_REVISION}
    - cd $ARGO_BASE_PATH
    - kustomize edit set image $CI_REGISTRY_IMAGE/$CI_PROJECT_NAME:$CI_COMMIT_REF_NAME
    - cat kustomization.yaml
    - cat deployment.yml
    - cd ../../..
    - echo "${CI_PIPELINE_CREATED_AT} - ${CI_COMMIT_REF_NAME}" >> $APP_CI_PATH/history.txt
    - git add .
    - git commit -m "[skip ci][${CI_COMMIT_REF_NAME}] ${CI_COMMIT_MESSAGE}"
    - git push origin $ARGO_TARGET_REVISION
  rules:
    - if: $CI_COMMIT_TAG != null

synchronize_argo:
  image: alpine:latest
  stage: synchronize_argo
  variables:
    GIT_STRATEGY: none
  retry: 2
  before_script:
    - apk add jq curl git delta
    - curl -sSf -L -o /usr/local/bin/argocd "https://github.com/argoproj/argo-cd/releases/download/v${ARGOCD_VERSION}/argocd-linux-amd64"
    - chmod +x /usr/local/bin/argocd
    - argocd login "${ARGO_SERVER_URL}" --insecure --username "${ARGO_USER_ID}" --password "${ARGO_USER_PASSWORD}" --plaintext
  script:
    - argocd app get argo-${CI_PROJECT_NAME} --refresh > /dev/null 2>&1
    - argocd app sync argo-${CI_PROJECT_NAME} --assumeYes
  rules:
    - if: $CI_COMMIT_TAG != null
# build_pages:
#   image: alpine:latest
#   stage: pages
#   variables:
#     GIT_STRATEGY: none
#   retry: 2
#   before_script:
#     - apk add --no-cache git curl bash openssh nodejs yarn docker python3
#     - python3 -m ensurepip && pip3 install docker-compose
#     # - curl -L "https://github.com/docker/compose/releases/download/v${DOCKER_COMPOSE_VERSION}/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
#     # - chmod +x /usr/local/bin/docker-compose
#     - docker-compose --version
#     - cd
#     - git clone --branch $CI_COMMIT_REF_NAME http://supervisor:$SUPERVISOR_ACCESS_TOKEN@git.protobox/gitlab/protobox1/docserver.git
#     - cd $CI_PROJECT_NAME
#     - mv factory/CI/static/docker-compose.yml docker-compose.yml
#     - mv factory/CI/static/Dockerfile Dockerfile
#     - git config --global user.name $REGISTRY_USERNAME
#     - git config --global user.email $CI_USER_EMAIL
#   script:
#     - rm -rf .git
#     - pwd
#     - git init
#     - git remote add origin https://github.com/leydifalldev/docserver.git
#     - git fetch --prune
#     - git checkout prod --force
#     - rm -rf docs
#     - ls
#     - docker-compose up
#     - ls
#     - echo "${CI_PIPELINE_CREATED_AT} - ${CI_COMMIT_REF_NAME}" >> history.txt
#     - git add docs
#     - git status
#     - git commit -m "[skip ci][GITHUB][${CI_COMMIT_REF_NAME}] ${CI_COMMIT_MESSAGE}"
#     - git push origin prod --force
